import px

def remove_ns_prefix(column):
  return px.replace('[a-z0-9\-]*/', column, '')

def add_source_dest_columns(df):
  df.pod = df.ctx['pod']
  df.namespace = df.ctx['namespace']

  # If remote_addr is a pod, get its name. If not, use IP address.
  df.ra_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
  df.ra_name = px.select(df.ra_pod != '', df.ra_pod, px.nslookup(df.remote_addr))

  df.is_server_tracing = df.trace_role == 2
  # Set client and server based on trace_role.
  df.source_pod = px.select(df.is_server_tracing, df.ra_name, df.pod)
  df.destination_pod = px.select(df.is_server_tracing, df.pod, df.ra_name)

  df.source_service = px.pod_name_to_service_name(df.source_pod)
  df.source_service = px.select(df.source_service != '', df.source_service, df.source_pod)
  df.destination_service = px.pod_name_to_service_name(df.destination_pod)
  df.destination_service = px.select(df.destination_service != '', df.destination_service, df.destination_pod)

  df.destination_namespace = px.pod_name_to_namespace(df.destination_pod)
  df.source_namespace = px.pod_name_to_namespace(df.source_pod)
  df.source_service = px.Service(remove_ns_prefix(df.source_service))
  df.destination_service = px.Service(remove_ns_prefix(df.destination_service))
  df.source_pod = remove_ns_prefix(df.source_pod)
  df.destination_pod = remove_ns_prefix(df.destination_pod)
  return df

df = px.DataFrame('cql_events', start_time=px.plugin.start_time, end_time=px.plugin.end_time)
df = add_source_dest_columns(df)

df.start_time = df.time_ - df.latency
df.latency = df.latency / (1000 * 1000)
df.req_bytes = px.length(df.req_body)
df.resp_bytes = px.length(df.resp_body)
df.req_cmd = px.cql_opcode_name(df.req_op)

# Work-around for a missing normalize_cql function.
df.query_struct = px.normalize_pgsql(df.req_body, df.req_cmd)
df.query = px.select(px.pluck(df.query_struct, 'error') == '', px.pluck(df.query_struct, 'query'), df.req_cmd)

df.pixie = 'pixie'
df.cluster_id = px.vizier_id()
df.cluster_name = px.vizier_name()
df.db_system = 'cassandra'

px.export(
df, px.otel.Data(
  resource={
    'service.name': df.source_service,
    'service.instance.id': df.source_pod,
    'k8s.namespace.name': df.source_namespace,
    'k8s.cluster.name': df.cluster_name,
    'px.cluster.id': df.cluster_id,
    'instrumentation.provider': df.pixie,
    'db.system': df.db_system,
  },
  data=[
    px.otel.trace.Span(
      name=df.req_cmd,
      start_time=df.start_time,
      end_time=df.time_,
      kind=px.otel.trace.SPAN_KIND_SERVER,
      attributes={
        'cassandra.service.name': df.destination_service,
        'cassandra.pod.name': df.destination_pod,
        'cassandra.namespace.name': df.destination_namespace,
        'cassandra.req_cmd': df.req_cmd,
        'cassandra.query': df.query,
        'cassandra.req_body': df.req_body,
        'cassandra.req_bytes': df.req_bytes,
        'cassandra.resp_cmd': df.resp_op,
        'cassandra.resp_body': df.resp_body,
        'cassandra.resp_bytes': df.resp_bytes,
        'cassandra.resp_latency': df.latency,
      }
    ),
    px.otel.trace.Span(
      name=df.query,
      start_time=df.start_time,
      end_time=df.time_,
      kind=px.otel.trace.SPAN_KIND_CLIENT,
    ),
  ],
),
)
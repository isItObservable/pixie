import px

def remove_ns_prefix(column):
  return px.replace('[a-z0-9\-]*/', column, '')

def add_source_dest_columns(df):
  df.pod = df.ctx['pod']
  df.node = df.ctx['node']
  df.container = df.ctx['container']
  df.deployment = df.ctx['deployment']

  # If remote_addr is a pod, get its name. If not, use IP address.
  df.ra_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
  df.ra_name = px.select(df.ra_pod != '', df.ra_pod, px.nslookup(df.remote_addr))
  df.ra_node = px.pod_id_to_node_name(px.ip_to_pod_id(df.remote_addr))
  df.ra_deployment = px.pod_id_to_deployment_name(px.ip_to_pod_id(df.remote_addr))

  df.is_server_tracing = df.trace_role == 2
  # Set client and server based on trace_role.
  df.source_pod = px.select(df.is_server_tracing, df.ra_name, df.pod)
  df.destination_pod = px.select(df.is_server_tracing, df.pod, df.ra_name)
  df.destination_node = px.select(df.is_server_tracing, df.node, df.ra_node)
  df.destination_deployment = px.select(df.is_server_tracing, df.deployment, df.ra_deployment)

  df.source_service = px.pod_name_to_service_name(df.source_pod)
  df.destination_service = px.pod_name_to_service_name(df.destination_pod)

  df.destination_namespace = px.pod_name_to_namespace(df.destination_pod)
  df.source_namespace = px.pod_name_to_namespace(df.source_pod)
  df.source_node = px.pod_id_to_node_name(px.pod_name_to_pod_id(df.source_pod))
  df.source_deployment = px.pod_name_to_deployment_name(df.source_pod)
  df.source_deployment = remove_ns_prefix(df.source_deployment)
  df.source_service = remove_ns_prefix(df.source_service)
  df.destination_service = remove_ns_prefix(df.destination_service)
  df.source_container = px.select(df.is_server_tracing, '', df.container)
  df.source_pod = remove_ns_prefix(df.source_pod)
  df.destination_pod = remove_ns_prefix(df.destination_pod)
  return df

df = px.DataFrame(table='http_events', start_time=px.plugin.start_time, end_time=px.plugin.end_time)
df = add_source_dest_columns(df)

df.latency = df.latency / (1000 * 1000)
df = df.groupby(['resp_status', 'req_path', 'destination_pod', 'destination_deployment', 'destination_node', 'destination_service', 'destination_namespace']).agg(
  latency_min=('latency', px.min),
  latency_max=('latency', px.max),
  latency_sum=('latency', px.sum),
  latency_count=('latency', px.count),
  time_=('time_', px.max),
)

df.cluster_name = px.vizier_name()
df.cluster_id = px.vizier_id()
df.pixie = 'pixie'

px.export(
df, px.otel.Data(
  resource={
    'service.name': df.destination_service,
    'service.instance.id': df.destination_pod,
    'k8s.pod.name': df.destination_pod,
    'k8s.deployment.name': df.destination_deployment,
    'k8s.namespace.name': df.destination_namespace,
    'k8s.node.name': df.destination_node,
    'px.cluster.id': df.cluster_id,
    'k8s.cluster.name': df.cluster_name,
    'instrumentation.provider': df.pixie,
  },
  data=[
    px.otel.metric.Summary(
      name='http.server.duration',
      description='measures the duration of the inbound HTTP request',
      unit='ms',
      count=df.latency_count,
      sum=df.latency_sum,
      quantile_values={
        0.0: df.latency_min,
        1.0: df.latency_max,
      },
      attributes={
        'http.status_code': df.resp_status,
      },
  )],
),
)
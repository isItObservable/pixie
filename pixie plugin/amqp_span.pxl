import px


def remove_ns_prefix(column):
  return px.replace('[a-z0-9\-]*/', column, '')


def add_source_dest_columns(df):
  df.pod = df.ctx['pod']
  df.node = df.ctx['node']
  df.deployment = df.ctx['deployment']
  df.namespace = df.ctx['namespace']

  # If remote_addr is a pod, get its name. If not, use IP address.
  df.ra_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
  df.is_ra_pod = df.ra_pod != ''
  df.ra_name = px.select(df.is_ra_pod, df.ra_pod, df.remote_addr)
  df.ra_node = px.pod_id_to_node_name(px.ip_to_pod_id(df.remote_addr))
  df.ra_deployment = px.pod_id_to_deployment_name(px.ip_to_pod_id(df.remote_addr))

  df.is_server_tracing = df.trace_role == 2
  df.is_source_pod_type = px.select(df.is_server_tracing, df.is_ra_pod, True)
  df.is_dest_pod_type = px.select(df.is_server_tracing, True, df.is_ra_pod)

  # Set client and server based on trace_role.
  df.source_pod = px.select(df.is_server_tracing, df.ra_name, df.pod)
  df.destination_pod = px.select(df.is_server_tracing, df.pod, df.ra_name)
  df.destination_node = px.select(df.is_server_tracing, df.node, df.ra_node)
  df.destination_deployment = px.select(df.is_server_tracing, df.deployment, df.ra_deployment)

  df = df.drop(['ra_pod', 'is_ra_pod', 'ra_name', 'is_server_tracing'])
  df.source_service = px.pod_name_to_service_name(df.source_pod)
  df.destination_service = px.pod_name_to_service_name(df.destination_pod)
  df.destination_namespace = px.pod_name_to_namespace(df.destination_pod)
  df.source_namespace = px.pod_name_to_namespace(df.source_pod)
  df.source_node = px.pod_id_to_node_name(px.pod_name_to_pod_id(df.source_pod))
  df.source_deployment = px.pod_name_to_deployment_name(df.source_pod)

  df.source_deployment = remove_ns_prefix(df.source_deployment)
  df.source_service = px.Service(remove_ns_prefix(df.source_service))
  df.destination_service = px.Service(remove_ns_prefix(df.destination_service))
  df.source_pod = remove_ns_prefix(df.source_pod)
  df.destination_pod = remove_ns_prefix(df.destination_pod)
  df.destination_deployment = remove_ns_prefix(df.destination_deployment)

  # If the destination service is missing then try the nslookup
  df.destination_service = px.select(
      df.destination_service != '',
      df.destination_service,
      px.nslookup(df.remote_addr),
  )
  # If the destination service is still missing then set the remote_addr
  df.destination_service = px.select(
      df.destination_service != '',
      df.destination_service,
      df.remote_addr,
  )
  return df


df = px.DataFrame(table='amqp_events', start_time=px.plugin.start_time, end_time=px.plugin.end_time)
df = add_source_dest_columns(df)

df.frame_name = px.amqp_frame_type_name(df.frame_type)
df.req_name = px.amqp_method_name(df.req_class_id, df.req_method_id)
df.resp_name = px.amqp_method_name(df.resp_class_id, df.resp_method_id)
df.req_name = px.select(df.req_name != 'Unknown', df.req_name, '')
df.resp_name = px.select(df.resp_name != 'Unknown', df.resp_name, '')
df.req_bytes = px.pluck_int64(df.req_msg, 'body_size')
df.resp_bytes = px.pluck_int64(df.resp_msg, 'body_size')
df.req_routing_key = px.pluck(df.req_msg, 'routing_key')
df.resp_routing_key = px.pluck(df.resp_msg, 'routing_key')
df.routing_key = px.select(df.req_routing_key != '', df.req_routing_key, df.resp_routing_key)
df.consumer_tag = px.pluck(df.resp_msg, "consumer_tag")
# We filter out the Content Body and Heartbeat frames from spans because they don't contain any useful information.
df = df[df.frame_name != "Content Body" and df.frame_name != "Heartbeat"]

df.pixie = 'pixie'
df.cluster_id = px.vizier_id()
df.cluster_name = px.vizier_name()

df.span_name = df.frame_name + px.select(df.req_name != '', '/' + df.req_name, '') + px.select(df.resp_name != '', '/' + df.resp_name, '')

px.export(
df, px.otel.Data(
  resource={
    'service.name': df.source_service,
    'service.instance.id': df.source_pod,
    'k8s.deployment.name': df.source_deployment,
    'k8s.namespace.name': df.source_namespace,
    'k8s.node.name': df.source_node,
    'amqp.service.name': df.destination_service,
    'amqp.pod.name': df.destination_pod,
    'amqp.node.name': df.destination_node,
    'amqp.deployment.name': df.destination_deployment,
    'amqp.namespace.name': df.destination_namespace,
    'amqp.frame_name': df.frame_name,
    'amqp.req_name': df.req_name,
    'amqp.resp_name': df.resp_name,
    'amqp.req_body': df.req_msg,
    'amqp.resp_body': df.resp_msg,
    'amqp.routing_key': df.routing_key,
    'amqp.consumer_tag': df.consumer_tag,
    'k8s.cluster.name': df.cluster_name,
    'px.cluster.id': df.cluster_id,
    'instrumentation.provider': df.pixie,
  },
  data=[
    px.otel.trace.Span(
      name=df.span_name,
      # We don't record the start of the span, so we use the end time as the start time.
      start_time=df.time_,
      end_time=df.time_,
      kind=px.otel.trace.SPAN_KIND_CLIENT,
    ),
  ],
),
)
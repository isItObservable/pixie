import px

def remove_ns_prefix(column):
  return px.replace('[a-z0-9\-]*/', column, '')

def add_source_dest_columns(df):
  df.pod = df.ctx['pod']
  df.node = df.ctx['node']
  df.deployment = df.ctx['deployment']
  df.namespace = df.ctx['namespace']

  # If remote_addr is a pod, get its name. If not, use IP address.
  df.ra_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
  df.ra_name = px.select(df.ra_pod != '', df.ra_pod, px.nslookup(df.remote_addr))
  df.ra_node = px.pod_id_to_node_name(px.ip_to_pod_id(df.remote_addr))
  df.ra_deployment = px.pod_id_to_deployment_name(px.ip_to_pod_id(df.remote_addr))

  df.is_server_tracing = df.trace_role == 2
  # Set client and server based on trace_role.
  df.source_pod = px.select(df.is_server_tracing, df.ra_name, df.pod)
  df.destination_pod = px.select(df.is_server_tracing, df.pod, df.ra_name)
  df.destination_node = px.select(df.is_server_tracing, df.node, df.ra_node)
  df.destination_deployment = px.select(df.is_server_tracing, df.deployment, df.ra_deployment)

  df.source_service = px.pod_name_to_service_name(df.source_pod)
  df.source_service = px.select(df.source_service != '', df.source_service, df.source_pod)
  df.destination_service = px.pod_name_to_service_name(df.destination_pod)
  df.destination_service = px.select(df.destination_service != '', df.destination_service, df.destination_pod)

  df.destination_namespace = px.pod_name_to_namespace(df.destination_pod)
  df.source_namespace = px.pod_name_to_namespace(df.source_pod)
  df.source_node = px.pod_id_to_node_name(px.pod_name_to_pod_id(df.source_pod))
  df.source_deployment = remove_ns_prefix(px.pod_name_to_deployment_name(df.source_pod))
  df.source_service = px.Service(remove_ns_prefix(df.source_service))
  df.destination_service = px.Service(remove_ns_prefix(df.destination_service))
  df.source_pod = remove_ns_prefix(df.source_pod)
  df.destination_pod = remove_ns_prefix(df.destination_pod)
  df.destination_deployment = remove_ns_prefix(df.destination_deployment)
  return df


df = px.DataFrame('redis_events', start_time=px.plugin.start_time, end_time=px.plugin.end_time)
df = add_source_dest_columns(df)

df.start_time = df.time_ - df.latency
df.latency = df.latency / (1000 * 1000)
df.req_bytes = px.length(df.req_args)
df.resp_bytes = px.length(df.resp)
df.pixie = 'pixie'
df.cluster_id = px.vizier_id()
df.cluster_name = px.vizier_name()
df.db_system = 'redis'
df.has_error = px.substring(df.resp, 0, 1) == '-'

px.export(df, px.otel.Data(
resource={
  'service.name': df.source_service,
  'service.instance.id': df.source_pod,
  'k8s.deployment.name': df.source_deployment,
  'k8s.namespace.name': df.source_namespace,
  'k8s.node.name': df.source_node,
  'k8s.cluster.name': df.cluster_name,
  'px.cluster.id': df.cluster_id,
  'instrumentation.provider': df.pixie,
  'db.system': df.db_system,
},
data=[
  px.otel.trace.Span(
    name=df.req_cmd,
    start_time=df.start_time,
    end_time=df.time_,
    kind=px.otel.trace.SPAN_KIND_SERVER,
    attributes={
      'redis.service.name': df.destination_service,
      'redis.pod.name': df.destination_pod,
      'redis.node.name': df.destination_node,
      'redis.deployment.name': df.destination_deployment,
      'redis.namespace.name': df.destination_namespace,
      'redis.req_cmd': df.req_cmd,
      'redis.req_bytes': df.req_bytes,
      'redis.resp_bytes': df.resp_bytes,
      'redis.resp_latency': df.latency,
      'redis.req_args': df.req_args,
      'redis.resp': df.resp,
      'redis.has_error': df.has_error,
    },
  ),
  px.otel.trace.Span(
    name=df.req_cmd,
    start_time=df.start_time,
    end_time=df.time_,
    kind=px.otel.trace.SPAN_KIND_CLIENT,
    attributes={
      'redis.pod.name': df.destination_pod,
      'redis.node.name': df.destination_node,
      'redis.deployment.name': df.destination_deployment,
      'redis.req_cmd': df.req_cmd,
      'redis.req_bytes': df.req_bytes,
      'redis.resp_bytes': df.resp_bytes,
      'redis.resp_latency': df.latency,
      'redis.req_args': df.req_args,
      'redis.resp': df.resp,
      'redis.has_error': df.has_error,
    },
  )
]
))
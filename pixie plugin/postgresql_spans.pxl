import px

def remove_ns_prefix(column):
return px.replace('[a-z0-9\-]*/', column, '')

def add_source_dest_columns(df):
df.pod = df.ctx['pod']
df.namespace = df.ctx['namespace']
df.container = df.ctx['container']

# If remote_addr is a pod, get its name. If not, use IP address.
df.ra_pod = px.pod_id_to_pod_name(px.ip_to_pod_id(df.remote_addr))
df.ra_name = px.select(df.ra_pod != '', df.ra_pod, px.nslookup(df.remote_addr))

df.is_server_tracing = df.trace_role == 2
# Set client and server based on trace_role.
df.source_pod = px.select(df.is_server_tracing, df.ra_name, df.pod)
df.destination_pod = px.select(df.is_server_tracing, df.pod, df.ra_name)

df.source_service = px.pod_name_to_service_name(df.source_pod)
df.source_service = px.select(df.source_service != '', df.source_service, df.source_pod)
df.destination_service = px.pod_name_to_service_name(df.destination_pod)
df.destination_service = px.select(df.destination_service != '', df.destination_service, df.destination_pod)

df.destination_namespace = px.pod_name_to_namespace(df.destination_pod)
df.source_namespace = px.pod_name_to_namespace(df.source_pod)
df.source_service = px.Service(remove_ns_prefix(df.source_service))
df.destination_service = px.Service(remove_ns_prefix(df.destination_service))
df.source_container = px.select(df.is_server_tracing, '', df.container)
df.source_pod = remove_ns_prefix(df.source_pod)
df.destination_pod = remove_ns_prefix(df.destination_pod)
return df

df = px.DataFrame('pgsql_events', start_time=px.plugin.start_time, end_time=px.plugin.end_time)
df = add_source_dest_columns(df)
df.normed_query_struct = px.normalize_pgsql(df.req, df.req_cmd)
df.query = px.pluck(df.normed_query_struct, 'query')
df = df[df.query != ""]
df.start_time = df.time_ - df.latency
df.cluster_name = px.vizier_name()
df.cluster_id = px.vizier_id()
df.pixie = 'pixie'
df.db_system = 'postgres'

px.export(
df, px.otel.Data(
  resource={
    'service.name': df.source_service,
  },
  data=[
    # Export client span format for the client side of the request
    px.otel.trace.Span(
      name=df.query,
      start_time=df.start_time,
      end_time=df.time_,
      kind=px.otel.trace.SPAN_KIND_CLIENT,
      attributes={
        'k8s.container.name': df.source_container,
        'service.instance.id': df.source_pod,
        'k8s.pod.name': df.source_pod,
        'k8s.namespace.name': df.source_namespace,
        'px.cluster.id': df.cluster_id,
        'k8s.cluster.name': df.cluster_name,
        'instrumentation.provider': df.pixie,
        'db.system': df.db_system,
      },
    ),
    # Export server span format for the server (Postgres) side of the request
    px.otel.trace.Span(
      name=df.query,
      start_time=df.start_time,
      end_time=df.time_,
      kind=px.otel.trace.SPAN_KIND_SERVER,
      attributes={
        'service.instance.id': df.source_pod,
        'k8s.namespace.name': df.source_namespace,
        'postgres.service.name': df.destination_service,
        'postgres.pod.name': df.destination_pod,
        'postgres.namespace.name': df.destination_namespace,
        'k8s.cluster.name': df.cluster_name,
        'px.cluster.id': df.cluster_id,
        'instrumentation.provider': df.pixie,
        'db.system': df.db_system,
        'postgres.req_cmd': df.req_cmd,
        # Disabling sending df.req and df.resp for now until illegal characters are handled.
        # 'postgres.req': df.req,
        # 'postgres.resp': df.resp,
        'postgres.resp_latency': df.latency,
      },
    ),
  ],
),
)